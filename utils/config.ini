[DEFAULT]
DATA_DIR = data/
YEAR = 2015
DATAFILES = ["%(YEAR)s_CashContributionsExtract.csv", "%(YEAR)s_ExpendituresExtract.csv", "%(YEAR)s_InKindContributionsExtract.csv", "%(YEAR)s_OtherReceiptsExtract.csv"]
; if False, a CSV file is written
OUTPUT_JSON = True
; controls JSON output formatting
PRETTY_PRINT = True

[DATA_FETCHER]
base_url=http://fcpa.alabamavotes.gov/PublicSite/Docs/BulkDataDownloads/
file_names=CashContributionsExtract.csv.zip,InKindContributionsExtract.csv.zip,ExpendituresExtract.csv.zip,OtherReceiptsExtract.csv.zip
destination_dir=data
chunk_size=1024
; leave year blank to get the current year
year=

[PARTY_FETCHER]
base_url=http://fcpa.alabamavotes.gov/PublicSite/SearchPages/CandidateSearch.aspx
selenium_server=http://127.0.0.1:4444/wd/hub
destination_dir=data
destination_file=Parties.csv

[GENERATE_TRANSACTEES]
; file extension will be added
OUTFILE = %(YEAR)s_Transactees
; headers used if writing a CSV file
HEADERS = ["_id", "transactee_type", "_API_status", "name", "organization_type", "address", "ContributionIDs", "ExpenditureIDs", "InKindContributionIDs", "ReceiptIDs"]

[GENERATE_PARTIES]
OUTFILE = Parties
HEADERS = ["name", "_id", "_API_status", "type", "status", "party", "office", "district", "place"]

[GENERATE_TRANSACTIONS]
OUTFILE = %(YEAR)s_Transactions
HEADERS = ["type", "transaction_type", "name", "transactee_id", "party_id", "amount", "filed_date", "explanation", "purpose", "transaction_id", "source_type", "amended", "inkind_nature", "endorsers"]

[GENERATE_DISTRICTS]
OCDID_DIR = %(DATA_DIR)socdIDs/
OUTFILE = %(YEAR)s_Districts
HEADERS = ["ocdID", "name"]

[CALL_CIVICINFO]
OCDID_DIR = %(DATA_DIR)socdIDs/
CACHEFILE = .API_Responses_cache.json
API_KEY = 
BASE_URL = https://www.googleapis.com/civicinfo/v2/representatives/
MAX_API_REQUESTS = 2500
; API responses expire after 30 days
TTL_SECONDS = 2592000
VERBOSE = False

[CALL_GEOCODING]
MAP_DIR = %(DATA_DIR)smap/
STATE_FILE = AL.geojson
COUNTIES_FILE = AL_Counties.geojson
UPPER_DISTRICTS = sldu-simple.json
LOWER_DISTRICTS = sldl-simple.json
; whether to use Google's API or that of OpenStreetMaps
USE_GOOGLE = True
; email address parameter for OSM
EMAIL_ADDRESS =
; Google API Key (required)
API_KEY = 
; per day usage limit (only enforced for each run)
MAX_API_REQUESTS = 2500
; an estimated minimum bounding rectangle around Alabama
ALABAMA_BOUNDS = 35.046674,-88.751659|30.077183,-84.687088
ALABAMA_BOUNDS_OSM = -88.7,35.09,-84.79,30.06
BASE_URL = https://maps.googleapis.com/maps/api/geocode/json?
BASE_URL_OSM = http://open.mapquestapi.com/nominatim/v1/search.php?
; it's not worth trying to geocode addresses containing these strings
BAD_ADDRESSES = ["NOT KNOWN", "PO BOX", "P.O. BOX", "P O BOX", "P. O. BOX", "P.O.BOX", "POST OFFICE BOX"]
VERBOSE = False
